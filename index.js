require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { addBuy, getBuys, clearBuys } = require('./utils/practiceStore');
const checkWallet = require('./utils/walletTracker');

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });
console.log('‚úÖ SheepTrackerBot is running...');

// üìü Log chat ID and respond to ping
bot.on('message', (msg) => {
  try {
    const chatId = msg.chat.id;
    console.log('üìü Chat ID:', chatId);

    if (msg.text && msg.text.toLowerCase().includes('ping')) {
      bot.sendMessage(chatId, 'Pong üêë');
    }
  } catch (err) {
    console.error('‚ùå Error handling message:', err);
  }
});

// üß™ Practice Buy Command
bot.onText(/\/practice buy (.+) (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const token = match[1];
  const amount = parseFloat(match[2]);

  if (!token || isNaN(amount)) {
    return bot.sendMessage(chatId, '‚ùå Invalid format. Use:\n/practice buy <token_address> <amount>');
  }

  addBuy(userId, token, amount);
  bot.sendMessage(chatId, `‚úÖ Practice buy recorded:\nToken: ${token}\nAmount: ${amount} SOL`);
});

// üìä Practice View Command
bot.onText(/\/practice view/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const buys = getBuys(userId);

  if (!buys.length) {
    return bot.sendMessage(chatId, 'üì≠ No practice trades found.');
  }

  const summary = buys.map((buy) => {
    const minsAgo = Math.floor((Date.now() - buy.timestamp) / 60000);
    return `‚Ä¢ ${buy.token} ‚Äî ${buy.amount} SOL ‚Äî ${minsAgo} min(s) ago`;
  }).join('\n');

  bot.sendMessage(chatId, `üìä Practice Trades:\n${summary}`);
});

// üîÅ Check wallet every 60 seconds for new buys
setInterval(() => {
  checkWallet(bot, process.env.GROUP_ID);
}, 60000);
